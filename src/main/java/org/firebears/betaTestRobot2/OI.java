// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.firebears.betaTestRobot2;

import static org.firebears.betaTestRobot2.Robot.report;

import org.firebears.betaTestRobot2.commands.HelloCommand;
import org.firebears.betaTestRobot2.commands.I2cWriteCommand;
import org.firebears.betaTestRobot2.commands.RandomCommand;
import org.firebears.recording.PlayRecordingCommand;
import org.firebears.recording.RecordingFactory;
import org.firebears.recording.StartRecordingCommand;
import org.firebears.recording.StopRecordingCommand;

import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.I2C.Port;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton trigger;
    public JoystickButton thumbButton;
    public Joystick joystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton button6;
    public JoystickButton button7;
    public JoystickButton button9;
    public JoystickButton button11;
    public I2C arduinoI2c;
    RecordingFactory recordingFactory;

    public OI() {

        Preferences config = Preferences.getInstance();
        int arduinoI2cAddress = config.getInt("arduino.i2c", 4);
        arduinoI2c = new I2C(Port.kOnboard, arduinoI2cAddress);
        report.addOtherConfig(arduinoI2cAddress, "Arduino I2C address");

        joystick = new Joystick(0) {
            public int getAxisCount() {
                // temporary hack to get around bug in Joystick class.
                return 5;
            }
        };
        Robot.report.addJoystick(0, "Main joystick", joystick);

        trigger = new JoystickButton(joystick, 1);
        Command triggerCommand = new HelloCommand("HELLO WORLD");
        trigger.whenPressed(triggerCommand);
        Robot.report.addJoystickButton(0, 1, "Say Hello", triggerCommand);

        thumbButton = new JoystickButton(joystick, 2);
        Command thumbCommand = new HelloCommand("GOODBYE");
        thumbButton.whenPressed(thumbCommand);
        Robot.report.addJoystickButton(0, 2, "Say Goodbye", thumbCommand);

        button6 = new JoystickButton(joystick, 6);
        Command button6Command = new RandomCommand();
        button6.whenReleased(button6Command);
        Robot.report.addJoystickButton(0, 6, "Random Action", button6Command);

        button7 = new JoystickButton(joystick, 7);
        Command button7Command = new I2cWriteCommand(arduinoI2c, new byte[] { '0', '0' });
        button7.whenPressed(button7Command);
        Robot.report.addJoystickButton(0, 7, "Arduino : set strip 0 to animation 0", button7Command);

        button9 = new JoystickButton(joystick, 9);
        Command button9Command = new I2cWriteCommand(arduinoI2c, new byte[] { '0', '1' });
        button9.whenPressed(button9Command);
        Robot.report.addJoystickButton(0, 9, "Arduino : set strip 0 to animation 1", button9Command);

        button11 = new JoystickButton(joystick, 11);
        Command button11Command = new I2cWriteCommand(arduinoI2c, new byte[] { '0', '2' });
        button11.whenPressed(button11Command);
        Robot.report.addJoystickButton(0, 11, "Arduino : set strip 0 to animation 2", button11Command);

        // SmartDashboard Buttons
        SmartDashboard.putData("HelloCommand", new HelloCommand("HI"));
        SmartDashboard.putData("RandomCommand", new RandomCommand());
        SmartDashboard.putData("Clear Arduino", new I2cWriteCommand(arduinoI2c, new byte[] { 0, 0, 0 }));

        recordingFactory = new RecordingFactory();
        recordingFactory.addAll(Robot.board.getRecordables());
        SmartDashboard.putData("Start Recording", new StartRecordingCommand(recordingFactory));
        SmartDashboard.putData("Stop Recording", new StopRecordingCommand(recordingFactory));
        SmartDashboard.putData("Play Recording", new PlayRecordingCommand(recordingFactory));
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getjoystick() {
        return joystick;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
